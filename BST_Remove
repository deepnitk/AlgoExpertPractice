public BST remove(int value){
			remove(value, null);
			return this;
		}
		
    public void remove(int value, BST parentNode) {
      // Write your code here.
      // Do not edit the return statement of this method.
			BST currentNode = this;
			
			while(currentNode != null){
				if(value< currentNode.value){
					parentNode = currentNode;
					currentNode = currentNode.left;
				} else if(value > currentNode.value){
					parentNode = currentNode;
					currentNode = currentNode.right;
				} else {
					if(currentNode.left != null && currentNode.right != null){
						currentNode.value = currentNode.right.getMinValue();
						currentNode.right.remove(currentNode.value, currentNode);
					}
					else if( parentNode == null){
						if(currentNode.left != null){
							currentNode.value = currentNode.left.value;
							currentNode.right = currentNode.left.right;
							currentNode.left = currentNode.left.left;
						} else if(currentNode.right != null){
							currentNode.value = currentNode.right.value;
							currentNode.right = currentNode.right.right;
							currentNode.left = currentNode.right.left;
						} else {
							
						}
					} else if(parentNode.left == currentNode) {
						parentNode.left = currentNode.left != null ? currentNode.left : currentNode.right;
					} else if(parentNode.right == currentNode) {
						parentNode.right = currentNode.left != null ? currentNode.left : currentNode.right;
					}
					break;
				}
			}
    }
		
		public int getMinValue(){
			if(left == null)
				return value;
			else {
				return left.getMinValue();
			}
		}
